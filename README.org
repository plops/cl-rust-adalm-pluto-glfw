
* Architecture:

start a bunch of threads to form a pipeline

read adc data (this thread runs on an isolated processor (kernel param isolcpus=0,1), in the hope that this reduces drops)
perform fft of block
convert complex fft result into something that can be displayed


the pipeline threads run with crossbeam scope and can all access the memory
memory contains a timestamp and an array
threads talk to each other through bounded channels r0,s0,r1,s1
threads transmit a single number, indicating which array has been processed by this stage

at startup they all wait for the fft library to initialize with https://docs.rs/crossbeam/0.7.1/crossbeam/sync/struct.WaitGroup.html
https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html


the visualizer imgui is running simultaneously and occasionally (60fps) updates the texture with the waterfall fft with the output of the last stage


* What settings we can change?

martin@labolg ~ $ ssh root@192.168.2.1
root@192.168.2.1's password: 
Welcome to:
______ _       _        _________________
| ___ \ |     | |      /  ___|  _  \ ___ \
| |_/ / |_   _| |_ ___ \ `--.| | | | |_/ /
|  __/| | | | | __/ _ \ `--. \ | | |    /
| |   | | |_| | || (_) /\__/ / |/ /| |\ \
\_|   |_|\__,_|\__\___/\____/|___/ \_| \_|

v0.31
http://wiki.analog.com/university/tools/pluto
# ls
# cd /sys/bus/iio/devices/
# ls
iio:device0  iio:device1  iio:device2  iio:device3  iio:device4
# cd iio\:device1/
# ls
calib_mode
calib_mode_available
dcxo_tune_coarse
dcxo_tune_coarse_available

- we have 5 devices
- each device has a few channels
- each device has attributes
- each channel has attributes
- each device has a name
- some channels have names


* References:

  |    date | link                                                                                                            | note                                  |
  |         | https://users.rust-lang.org/t/sharing-buffer-between-threads-without-locking/10508                              |                                       |
  |         | https://docs.rs/triple_buffer/5.0.4/triple_buffer/                                                              |                                       |
  |         | https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-11a496ce7791 |                                       |
  |         | https://wiki.analog.com/resources/tools-software/linux-software/libiio_internals                                |                                       |
  | 2017-03 | https://users.rust-lang.org/t/spmc-buffer-triple-buffering-for-multiple-consumers/10118                         |                                       |
  | 2017-11 | https://users.rust-lang.org/t/code-review-triplebuffer-for-sending-huge-objects-between-threads/13787/7         |                                       |
  |         | https://github.com/HadrienG2/triple-buffer                                                                      | consumer is not in sync with producer |
  |         | https://doc.rust-lang.org/book/ch16-02-message-passing.html                                                     |                                       |
  |         | https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html                                     | scoped thread, atomic cell            |
  |         | https://users.rust-lang.org/t/how-can-i-allocate-aligned-memory-in-rust/33293                                   | std::slice::from_raw_parts[_mut]      |
  |         | https://users.rust-lang.org/t/solved-how-to-move-non-send-between-threads-or-an-alternative/19928               |                                       |


* How to build release:

** optimzed for latency
RUSTFLAGS="-C target-cpu=native -C llvm-args=-cost-kind=latency" cargo build --release
cargo run --release

** optimized for size
https://github.com/johnthagen/min-sized-rust

check with https://github.com/RazrFalcon/cargo-bloat


*** largest crates 

RUSTFLAGS="-C target-cpu=native -C llvm-args=-cost-kind=latency" cargo bloat --release --crates

   Compiling code v0.1.0 (/home/martin/stage/cl-rust-adalm-pluto-glfw/code)
    Finished release [optimized] target(s) in 1m 12s
    Analyzing target/release/code

 File  .text     Size Crate
32.2%  61.2%   1.0MiB [Unknown]
 4.6%   8.7% 151.9KiB imgui_sys
 4.1%   7.9% 137.5KiB std
 2.0%   3.9%  67.9KiB glfw
 1.7%   3.2%  56.4KiB code
 1.3%   2.4%  42.6KiB gl
 1.1%   2.1%  36.9KiB rustc_demangle
 1.0%   1.9%  32.9KiB fftw_src
 0.9%   1.7%  30.2KiB imgui_opengl_renderer
 0.9%   1.6%  28.3KiB crossbeam_channel
 0.7%   1.2%  21.7KiB crossbeam_utils
 0.5%   1.0%  16.9KiB backtrace
 0.5%   0.9%  15.4KiB backtrace_sys
 0.2%   0.3%   5.2KiB parking_lot_core
 0.1%   0.2%   2.8KiB parking_lot
 0.1%   0.2%   2.6KiB industrial_io
 0.1%   0.1%   2.2KiB chrono
 0.1%   0.1%   2.0KiB rand_os
 0.0%   0.1%   1.6KiB rand_jitter
 0.0%   0.0%     720B rand_core
 0.1%   0.1%   1.8KiB And 6 more crates. Use -n N to show more.
52.5% 100.0%   1.7MiB .text section size, the file size is 3.2MiB

Note: numbers above are a result of guesswork. They are not 100% correct and never will be.


*** largest functions
RUSTFLAGS="-C target-cpu=native -C llvm-args=-cost-kind=latency" cargo bloat --release -n 10

    Finished release [optimized] target(s) in 0.05s
    Analyzing target/release/code

 File  .text    Size                 Crate Name
 1.3%   2.4% 42.5KiB                    gl gl::load_with::inner
 0.9%   1.7% 30.1KiB imgui_opengl_renderer imgui_opengl_renderer::gl::Gl::load_with
 0.9%   1.7% 28.9KiB                  code code::main::{{closure}}::{{closure}}
 0.8%   1.6% 27.5KiB             [Unknown] t2_64
 0.8%   1.5% 26.0KiB                  code code::main
 0.7%   1.4% 23.6KiB             [Unknown] hb_64
 0.7%   1.3% 23.0KiB             [Unknown] t1_64
 0.7%   1.3% 22.3KiB             [Unknown] hf_64
 0.6%   1.1% 18.9KiB             [Unknown] r2cf_128
 0.6%   1.1% 18.8KiB             [Unknown] r2cb_128
44.1%  83.9%  1.4MiB                       And 2269 smaller methods. Use -n N to show more.
52.5% 100.0%  1.7MiB                       .text section size, the file size is 3.2MiB


* On Reducing lag:
- not yet used
- https://www.khronos.org/opengl/wiki/Sync_Object
- https://www.khronos.org/registry/OpenGL/extensions/NV/WGL_NV_delay_before_swap.txt
