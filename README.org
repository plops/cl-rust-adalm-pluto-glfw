
Architecture:

start a bunch of threads to form a pipeline

read adc data (this thread runs on an isolated processor (kernel param isolcpus=0,1), in the hope that this reduces drops)
perform fft of block
convert complex fft result into something that can be displayed


the pipeline threads run with crossbeam scope and can all access the memory
memory contains a timestamp and an array
threads talk to each other through bounded channels r0,s0,r1,s1
threads transmit a single number, indicating which array has been processed by this stage

at startup they all wait for the fft library to initialize with https://docs.rs/crossbeam/0.7.1/crossbeam/sync/struct.WaitGroup.html
https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html


the visualizer imgui is running simultaneously and occasionally (60fps) updates the texture with the waterfall fft with the output of the last stage


References:


				;; https://users.rust-lang.org/t/sharing-buffer-between-threads-without-locking/10508
				;; https://docs.rs/triple_buffer/5.0.4/triple_buffer/
				;; https://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-11a496ce7791
				;; https://wiki.analog.com/resources/tools-software/linux-software/libiio_internals
				;; 2017-03 https://users.rust-lang.org/t/spmc-buffer-triple-buffering-for-multiple-consumers/10118
				;; 2017-11 https://users.rust-lang.org/t/code-review-triplebuffer-for-sending-huge-objects-between-threads/13787/7
				;; https://github.com/HadrienG2/triple-buffer consumer is not in sync with producer
				;; https://doc.rust-lang.org/book/ch16-02-message-passing.html
				;; https://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html scoped thread, atomic cell
				 ;; https://users.rust-lang.org/t/how-can-i-allocate-aligned-memory-in-rust/33293 std::slice::from_raw_parts[_mut]
				 ;; https://users.rust-lang.org/t/solved-how-to-move-non-send-between-threads-or-an-alternative/19928
